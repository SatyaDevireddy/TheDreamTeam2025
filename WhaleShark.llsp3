#!/usr/bin/env python3

import hub
import sys
import time

import color, motor, motor_pair, runloop
from hub import light_matrix, button, motion_sensor, light, port


# CONSTANTS
#----------------------------------------
WHEEL_CIRCUMFERENCE = 17.584
# END CONSTANTS
#----------------------------------------

async def go_forward_no_wait(in_distance, in_speed, in_accel, kp,ki,kd,target_angle):
    await runloop.sleep_ms(20)
    motor.reset_relative_position(port.B, 0)
    integral = 0.0
    last_error = 0.0
    derivative = 0.0
    current_angle = get_yaw_value()

    if in_distance > 0:
        direction = 1
    else:
        direction =-1

    while abs(motor.relative_position(port.B)) < abs(in_distance):
            error = current_angle - target_angle
            print("current angle: ",current_angle," target_angle: ",target_angle);
            integral = integral + error
            derivative = error - last_error
            last_error = error
            # compute steering correction
            steering_value = (error * kp) + (integral * ki) + (derivative * kd)
            motor_pair.move(motor_pair.PAIR_1, int(steering_value)*direction, velocity=in_speed*direction, acceleration=in_accel)
    motor_pair.stop(motor_pair.PAIR_1) #stop motor


async def turn_to_angle_no_wait(in_left_speed=0, in_right_speed=50, in_angle=90, in_accel=400,in_stop=False):
    motor_pair.move_tank(motor_pair.PAIR_1, in_left_speed, in_right_speed, acceleration=in_accel)
    wait_for_yaw_abs(angle=in_angle)
    if in_stop: motor_pair.stop(motor_pair.PAIR_1, stop=motor.HOLD)

async def turn_to_angle_no_wait_old(target_angle, speed, acceleration):
    await runloop.sleep_ms(20)
    start_yaw = get_yaw_value()
 #print(str(target_angle)+" -- " + str(motion_sensor.tilt_angles()[0]*0.1))
    if(target_angle>0):
        while abs((motion_sensor.tilt_angles()[0] - start_yaw)*0.1 - target_angle ) > 1:
            motor_pair.move_tank(motor_pair.PAIR_1,-speed,speed,acceleration=acceleration) # Apply correction to the motors
        motor_pair.stop(motor_pair.PAIR_1)
    else:
        while abs(target_angle - (motion_sensor.tilt_angles()[0]-start_yaw)*0.1)> 1:
            motor_pair.move_tank(motor_pair.PAIR_1,speed,-speed,acceleration=acceleration)
        motor_pair.stop(motor_pair.PAIR_1)


# UTILITY FUNCTIONS
#----------------------------------------

# initialize motor and reset yaw
def do_init():
    # reset yaw to 0
    motion_sensor.set_yaw_face(motion_sensor.TOP)
    motion_sensor.reset_yaw(0)
    i = 0
    while (hub.motion_sensor.stable() == False):
        i = i + 1
        # Use time.sleep_ms instead of time.sleep_ms
        # to ensure it is synchronized
        time.sleep_ms(10)
        hub.light_matrix.write(str(i))
        if i >= 100:
            break

# def follow_for_distance(initial_position=0,
#                        distance_to_cover=0):
#    current_position = abs(motor.relative_position(port.B))
#    distance_covered = current_position - initial_position
#    if distance_covered < 0 : distance_covered = distance_covered * -1
#    if (distance_covered >= abs(distance_to_cover)):
#        return False
#    else:
#        return True

# Return true if LEFT button is pressed
def is_left_button_pressed():
    return button.pressed(button.LEFT) > 0


# Return true if RIGHT button is pressed
def is_right_button_pressed():
    return button.pressed(button.RIGHT) > 0

def get_yaw_value():
    return motion_sensor.tilt_angles()[0] * -0.1


def degrees_for_distance(distance_cm):
    # Add multiplier for gear ratio if needed
    return int((distance_cm/WHEEL_CIRCUMFERENCE) * 360)




def wait_for_yaw_abs(angle=0):
    abs_angle = abs(angle)
    abs_current_yaw = abs(get_yaw_value())
    print(" angle:"+str(angle)+" abs_current_yaw: " + str(abs_current_yaw))

    if angle == 0:
        if get_yaw_value() > 0:
            while get_yaw_value() >= angle: time.sleep_ms(10)
        elif get_yaw_value() < 0:
            while get_yaw_value() <= angle: time.sleep_ms(10)
    elif abs_current_yaw > abs_angle:
        while abs(get_yaw_value()) >= abs_angle:
            print("current yaw:"+str(get_yaw_value()))
            time.sleep_ms(10)
    elif abs_current_yaw < abs_angle:
        while abs(get_yaw_value()) <= abs_angle:
            print("current yaw:"+str(get_yaw_value()))
            time.sleep_ms(10)


async def follow_gyro_angle(kp,
                            ki,
                            kd,
                            speed,
                            target_angle,
                            sleep_time,
                            follow_for,
                            acceleration=2000,
                            deceleration=2000,
                            **kwargs):
    # get initial reading from left motor
    integral = 0.0
    last_error = 0.0
    derivative = 0.0
    while (follow_for(**kwargs)):
        current_angle = get_yaw_value()
        error = current_angle - target_angle
        print("current angle: ",current_angle," target_angle: ",target_angle);
        integral = integral + error
        derivative = error - last_error
        last_error = error
        # compute steering correction
        steering_value = (error * kp) + (integral * ki) + (derivative * kd)

        if sleep_time:
            time.sleep_ms(sleep_time)
        # kp value should be +ve for forward movement (positive speed value), and -ve for backward movement (negative speed value)
        motor_pair.move(motor_pair.PAIR_1, int(steering_value), velocity=speed, acceleration=acceleration)

    # stop when follow_for condition is met
    motor_pair.stop(motor_pair.PAIR_1, stop=motor.HOLD)


async def pivot_gyro_turn_abs(left_speed=0, right_speed=50, angle=90, stop=False):
    motor_pair.move_tank(motor_pair.PAIR_1, left_speed, right_speed)
    wait_for_yaw_abs(angle=angle)
    if stop: motor_pair.stop(motor_pair.PAIR_1, stop=motor.HOLD)


def get_yaw_angle():
    current_yaw = motion_sensor.tilt_angles()[0] * -0.1
    if (current_yaw < 0):
        return (current_yaw + 360)
    return current_yaw

# async def turnRight(angle):
#    motor_pair.move_tank(motor_pair.PAIR_1, 200, -200)
#    while abs(get_yaw_angle()) <= angle: time.sleep_ms(10)
#    motor_pair.stop(motor_pair.PAIR_1, stop=motor.HOLD)

async def turnRight(angle):
    motor_pair.move_tank(motor_pair.PAIR_1, 200, -200)
    while abs(get_yaw_angle()) <= angle:
        print ("Yaw:"+str(abs(get_yaw_angle())))
        time.sleep_ms(10)

    motor_pair.stop(motor_pair.PAIR_1, stop=motor.HOLD)
    print("Motor Pair Stopped")

async def turnLeft(angle):
    motor_pair.move_tank(motor_pair.PAIR_1, -200, 200)
    while abs(get_yaw_angle()) >= angle: time.sleep_ms(10)
    motor_pair.stop(motor_pair.PAIR_1, stop=motor.HOLD)


def get_time_taken_in_seconds(start_time, end_time):
    return int(time.ticks_diff(end_time, start_time)/1000)

# END UTILITY FUNCTIONS
#----------------------------------------

async def run1(): # Lift the Mast
    motion_sensor.reset_yaw(0)
    await go_forward_no_wait(in_distance=-640,in_speed=900,in_accel=4000,kp=1.4,ki=0,kd=0,target_angle=0)#go forward for mast
    await turn_to_angle_no_wait(in_left_speed=0,in_right_speed=-300,in_angle=85,in_accel=900,in_stop=True)#turn towards mast
    await go_forward_no_wait(in_distance=-330,in_speed=300,in_accel=1000,kp=1.4,ki=0,kd=0,target_angle=90)#go forward to lift mast
    await go_forward_no_wait(in_distance=200,in_speed=300,in_accel=1000,kp=1.4,ki=0,kd=0,target_angle=90) # Move back to clear
    await turn_to_angle_no_wait(in_left_speed=-300,in_right_speed=0,in_angle=30,in_accel=900,in_stop=True) # turn to Red Base
    await go_forward_no_wait(in_distance=1200,in_speed=900,in_accel=11000,kp=1.4,ki=0,kd=0,target_angle=30)#go to Red Base

# # await motor.run_for_degrees (port.A ,-170,500, stop=motor.BRAKE, acceleration=600, deceleration=600)#reset attachment
#    await turn_to_angle_no_wait(37, 500, 500)# Turn towards angler fish
# # await go_straight(-2000,1050,4000) #go forward
#    await go_forward_no_wait(-2000,1050,4000)#go forward to angler fish
# #motor_pair.stop(motor_pair.PAIR_1)
#    await turn_to_angle_no_wait (-65,300,500*3) # activate angler fish
#    #await go_straight (60,1050,500*5)
#    await go_forward_no_wait(60,1050,500*2)
# # await go_straight (-60,1050,500*5)
#    await go_forward_no_wait(-60,1050,500*2)
#    await turn_to_angle_no_wait (29,100,250*4) # turn back towards sample
# # await go_straight(-310,800,400*2) # go to sample
#    await go_forward_no_wait(-240,800,300)# go to sample
#    await motor.run_for_degrees (port.A, 150,300) #pick up sample
#    #await go_straight (240,800,500*2) #back up from sample
#    await go_forward_no_wait(240,800,500*2)# back up from sample

#    await motor.run_for_degrees (port.A, -180,500) #drop the sample on the floor
#    await turn_to_angle_no_wait (-2,200,350*4) #turn to the submersible

#    #await go_straight (-250,350,350*4) #go forward to submersible
#    await go_forward_no_wait(-265,350,350*4)#go forward to submersible
#    await motor.run_for_degrees (port.A,150,200*3) #go and do submersible with the arm
# # await go_straight (150,400,400*3) #back up from submersible
#    await go_forward_no_wait(150,400,400*3)
#    await turn_to_angle_no_wait (-60,200,200*2) #turn back towards octopus circle
#    #await go_straight (-400,700,700*4) #back up into octopus circle
#    await go_forward_no_wait(-375,700,700*4) # move to octopus drop zone


# run 2 program
async def run2():
    motion_sensor.reset_yaw(0)

    # go backward to get out of base
#    motor.reset_relative_position(port.B, 0)
#    initial_position = abs(motor.relative_position(port.B))
#    await follow_gyro_angle(kp=1.45, ki=0, kd=0, speed=-500, target_angle=0, sleep_time=0, follow_for=follow_for_distance,
#            initial_position=initial_position, distance_to_cover=500) #degrees_for_distance(20)))

#    motor.reset_relative_position(port.B, 0)
#    initial_position = abs(motor.relative_position(port.B))
# # await turnRight(45)
#    await pivot_gyro_turn_abs(left_speed=125, right_speed=-125, angle=90, stop=True)

#    motor.reset_relative_position(port.B, 0)
#    initial_position = abs(motor.relative_position(port.B))
#    await follow_gyro_angle(kp=1, ki=0, kd=0, speed=-500, target_angle=90, sleep_time=0, follow_for=follow_for_distance,
#            initial_position=initial_position, distance_to_cover=250) #degrees_for_distance(20)))
#    # motor.reset_relative_position(port.B, 0)
#    #initial_position = abs(motor.relative_position(port.B))
# # await turnRight(45)
#    await pivot_gyro_turn_abs(left_speed=125, right_speed=-125, angle=179, stop=True)

#    motor.reset_relative_position(port.B, 0)
#    initial_position = abs(motor.relative_position(port.B))
#    await follow_gyro_angle(kp=1, ki=0, kd=0, speed=-500, target_angle=179, sleep_time=0, follow_for=follow_for_distance,
#            initial_position=initial_position, distance_to_cover=100) #degrees_for_distance(20)))

#    await pivot_gyro_turn_abs(left_speed=125, right_speed=-125, angle=269, stop=True)

#    motor.reset_relative_position(port.B, 0)
#    initial_position = abs(motor.relative_position(port.B))
#    await follow_gyro_angle(kp=1, ki=0, kd=0, speed=-500, target_angle=269, sleep_time=0, follow_for=follow_for_distance,
#            initial_position=initial_position, distance_to_cover=100) #degrees_for_distance(20)))


# run 1 program
async def run3():
    motion_sensor.reset_yaw(0)

    # go backward to get out of base
    motor.reset_relative_position(port.B, 0)
    initial_position = abs(motor.relative_position(port.B))
    await follow_gyro_angle(kp=1.45, ki=0, kd=0, speed=-500, target_angle=0, sleep_time=0, follow_for=follow_for_distance,
            initial_position=initial_position, distance_to_cover=(1000)) #degrees_for_distance(20)))

    motor.reset_relative_position(port.B, 0)
    initial_position = abs(motor.relative_position(port.B))
# await turnRight(45)
    await pivot_gyro_turn_abs(left_speed=125, right_speed=-125, angle=90, stop=True)

    motor.reset_relative_position(port.B, 0)
    initial_position = abs(motor.relative_position(port.B))
    await follow_gyro_angle(kp=1.45, ki=0, kd=0, speed=-500, target_angle=90, sleep_time=0, follow_for=follow_for_distance,
            initial_position=initial_position, distance_to_cover=(500)) #degrees_for_distance(20)))
    # move back from ship mast
    motor.reset_relative_position(port.B, 0)
    initial_position = abs(motor.relative_position(port.B))
    await follow_gyro_angle(kp=1.45, ki=0, kd=0, speed=500, target_angle=90, sleep_time=0, follow_for=follow_for_distance,
            initial_position=initial_position, distance_to_cover=(400)) #degrees_for_distance(20)))
    motor_pair.stop(motor_pair.PAIR_1)

    motor.reset_relative_position(port.B, 0)
    initial_position = abs(motor.relative_position(port.B))
    await pivot_gyro_turn_abs(left_speed=-125, right_speed=125, angle=-40, stop=True)

    motor.reset_relative_position(port.B, 0)
    initial_position = abs(motor.relative_position(port.B))
    await follow_gyro_angle(kp=1.45, ki=0, kd=0, speed=500, target_angle=40, sleep_time=0, follow_for=follow_for_distance,
            initial_position=initial_position, distance_to_cover=(400)) #degrees_for_distance(20)))
    motor_pair.stop(motor_pair.PAIR_1)

# await pivot_gyro_turn_abs(left_speed=-200, right_speed=200, angle=-45, stop=True)
# motor.reset_relative_position(port.B, 0)
    #initial_position = abs(motor.relative_position(port.B))

    print("Program ended")
    return
    await follow_gyro_angle(kp=1.45, ki=0, kd=0, speed=-500, target_angle=0, sleep_time=0, follow_for=follow_for_distance,
            initial_position=initial_position, distance_to_cover= 750)#(degrees_for_distance(20)))
    motor.reset_relative_position(port.B, 0)

    await follow_gyro_angle(kp=1.45, ki=0, kd=0, speed=500, target_angle=0, sleep_time=0, follow_for=follow_for_distance,
            initial_position=initial_position, distance_to_cover= 750)#(degrees_for_distance(20)))
    motor.reset_relative_position(port.B, 0)

    # turn left to get in alignment with krill
    await pivot_gyro_turn_abs(left_speed=-200, right_speed=200, angle=-45, stop=True)

    # await motor_pair.move_tank_for_degrees (motor_pair.PAIR_1, 1010,2000,1500, stop=motor.BRAKE, acceleration=4000, deceleration=4000)
    # await motor_pair.move_tank_for_degrees (motor_pair.PAIR_1, -350,900,0, stop=motor.COAST, acceleration=600, deceleration=600)
    # await motor_pair.move_tank_for_degrees (motor_pair.PAIR_1, -750,1050,1050, stop=motor.BRAKE, acceleration=600, deceleration=600)
    # await motor_pair.move_tank_for_degrees (motor_pair.PAIR_1, 300,800,800, stop=motor.BRAKE, acceleration=200, deceleration=600)
    # await motor_pair.move_tank_for_degrees (motor_pair.PAIR_1, 700,400,800, stop=motor.BRAKE, acceleration=4000, deceleration=4000)
    # await motor_pair.move_tank_for_degrees (motor_pair.PAIR_1, 700,2000,2000, stop=motor.BRAKE, acceleration=4000, deceleration=4000)


# END RUN 1
#----------------------------------------


async def run5(): # Collecting on Blue Side, Shipping Lanes
    motion_sensor.reset_yaw(0)
    # await go_forward_no_wait(in_distance=-640,in_speed=900,in_accel=4000,kp=1.4,ki=0,kd=0,target_angle=0)#go forward for mast
    # await turn_to_angle_no_wait(in_left_speed=0,in_right_speed=-300,in_angle=85,in_accel=900,in_stop=True)#turn towards mast
    # await go_forward_no_wait(in_distance=-330,in_speed=300,in_accel=1000,kp=1.4,ki=0,kd=0,target_angle=90)#go forward to lift mast
    # await go_forward_no_wait(in_distance=200,in_speed=300,in_accel=1000,kp=1.4,ki=0,kd=0,target_angle=90) # Move back to clear
    # await turn_to_angle_no_wait(in_left_speed=-300,in_right_speed=0,in_angle=30,in_accel=900,in_stop=True) # turn to Red Base
    # await go_forward_no_wait(in_distance=1200,in_speed=900,in_accel=11000,kp=1.4,ki=0,kd=0,target_angle=30)#go to Red Base



# MAIN EXECUTE FUNCTION
#----------------------------------------

async def execute(run_numbers=None):

    runs_to_execute = list()

    if isinstance(run_numbers, int):
        run_numbers = [run_numbers]

    # If run_numbers are not provided execute all runs
    runs_to_execute = run_numbers if run_numbers else [1, 2, 3, 4, 5]

    start_times = [time.ticks_ms() for _ in runs_to_execute]
    end_times = [time.ticks_ms() for _ in runs_to_execute]

    run_functions_map = {
                            1: run1, # or run1a
                            2: run2,
                    #    3: run3,
                        #    4: run4,
                        #5: run5
                        }
    print("Start - Execute")

    # Initialization
    # Define motor pai for robot movements
    motor_pair.pair(motor_pair.PAIR_1, port.B, port.D)

    do_init()
    light_matrix.write("0")
    light.color(light.POWER, color.RED)

    for i, run_number in enumerate(runs_to_execute):

        # waiting for left button to be pressed to start the run
        await runloop.until(is_left_button_pressed)
        print("Starting Run: " + str(run_number))

        light.color(light.POWER, color.MAGENTA)
        light_matrix.show_image(light_matrix.IMAGE_BUTTERFLY)

        start_times[i] = time.ticks_ms()
        do_init()

        runloop.run(run_functions_map[run_number]())
        end_times[i] = time.ticks_ms()
        light.color(light.POWER, color.YELLOW)

        if i > 0:
            print("Transition time: " + str(get_time_taken_in_seconds(end_times[i - 1], start_times[i])) + " s")
        print("Run " + str(run_number) + " time " + str(get_time_taken_in_seconds(start_times[i], end_times[i])) + " s")
        print("---------------------------------------------------------------------------")

    # Print execution times
    print("---------------------------------------------------------------------------")
    print("SUMMARY:")
    total_runs_time = 0
    total_transitions_time = 0
    total_time = 0

    for i, run_number in enumerate(runs_to_execute):
        if i > 0:
            transition_time = get_time_taken_in_seconds(end_times[i - 1], start_times[i])
            print("Transition time: " + str(transition_time) + " s")
            total_transitions_time += transition_time
            total_time += transition_time

        run_time = get_time_taken_in_seconds(start_times[i], end_times[i])
        print("Run " + str(run_number) + " time " + str(run_time) + " s")
        total_runs_time += run_time
        total_time += run_time

    print("***************************************************************************")

    print("TOTAL RUN TIME = " + str(total_runs_time) + " s")
    print("TOTAL TRANSITIONS TIME = " + str(total_transitions_time) + " s")
    print("TOTAL TIME = " + str(total_transitions_time + total_runs_time) + " s")

    print("***************************************************************************")


# END MAIN EXECUTE FUNCTION
#----------------------------------------

# Integrated Runs

# SLOT 0 - All Runs#
#runloop.run(execute([1, 2, 3, 4, 5]))
runloop.run(execute([1,2, 3, 4, 5]))

# SLOT 1 - Run 2 Onwards
#runloop.run(execute([2, 3, 4, 5]))

# SLOT 2 - Run 3 Onwards
#runloop.run(execute([3, 4, 5]))

# SLOT 3 - Run 4 Onwards
#runloop.run(execute([4, 5]))

# SLOT 4 - Run 5
#runloop.run(execute([5])
